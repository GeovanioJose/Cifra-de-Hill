/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import commom.Hill;
import commom.Matriz;
import commom.Tabela_Chave;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos
 */
public class Tela_Principal extends javax.swing.JFrame {

    /**
     * Creates new form Tela_Principal
     */
    private Matriz chave;
    private Tabela_Chave tabela;
    private boolean flag_tabela_perso=false;
    
    
    public Tela_Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto AL  -Cifra de Hill- ");

        jScrollPane1.setViewportView(jTextPane1);

        jLabel1.setText("Matriz Chave:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 2", "Title 3", "Title 4", "Título 4", "Título 5", "Título 6", "Título 7", "Título 8", "Título 9", "Título 10", "null", "null", "null", "null", "null", "null", "null", "Título 18"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
            jTable1.getColumnModel().getColumn(10).setResizable(false);
            jTable1.getColumnModel().getColumn(11).setResizable(false);
            jTable1.getColumnModel().getColumn(12).setResizable(false);
            jTable1.getColumnModel().getColumn(13).setResizable(false);
            jTable1.getColumnModel().getColumn(14).setResizable(false);
            jTable1.getColumnModel().getColumn(15).setResizable(false);
            jTable1.getColumnModel().getColumn(16).setResizable(false);
            jTable1.getColumnModel().getColumn(17).setResizable(false);
        }

        jLabel2.setText("Matriz 0x0");

        jButton1.setText("Confirmar Matriz Chave");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Criptografar");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Descriptografar");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jTextField1.setText("Digite texto aqui");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Texto:");

        jLabel4.setText("Tabela:");

        jCheckBox3.setText("A-Z");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("a-Z");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jButton2.setText("Editar");

        jButton3.setText("Criptografar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jCheckBox3)
                                    .addComponent(jCheckBox4)
                                    .addComponent(jButton2))
                                .addGap(89, 89, 89)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))
                        .addGap(146, 146, 146)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Botão confirmar matriz
        
        //verificar se a tabela foi preenchida 
        if(jTable1.getValueAt(0,0)!=null){
            jTable1.setSelectionMode(0);
            
            //criando matriz chave temporaria e pegando valores da tabela para (nxn)
            int[][] matriz_chave =new int[190][190];
            int maior_i=-1;
            int maior_j=-1;
            for(int i =0; i<=17; i++){
                for(int j =0; j<=17; j++){
                    if(jTable1.getValueAt(i,j)!= null){
                        if (i>maior_i){maior_i=i;}
                        if (j>maior_j){maior_j=j;}
                        matriz_chave[i+1][j+1]=Integer.parseInt(jTable1.getValueAt(i,j).toString());
                    }

                }

            }

            //completando matriz incompleta
            if(jTable1.getValueAt(maior_i,maior_j)==null){
                //jTable1.setValueAt(0,maior_i,maior_j);
                //matriz_chave[maior_i+1][maior_j+1]=0;
                String connectMessage= "Matriz incompleta!";
                JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }


            maior_j++;
            maior_i++;
            
            //VERIFICAR SE MATRIZ É QUADRADA
            if(maior_j!=maior_i){
                String connectMessage= "Matriz não é quadrada!";
                JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //criando a matriz chave 
            chave=new Matriz(maior_i,maior_j,matriz_chave); 
            
            //VERIFICA, NO CASO DA MATRIZ SER IGUAL OU MENOR QUE 3x3, SE O DET != 0
            if(maior_j==3){
                if(Matriz.determinante(chave)==0){
                    String connectMessage= "O determinante da matriz é igual a 0";
                    JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            //mostrando tamanho da matriz definida
            jLabel2.setText("Matriz "+maior_i+"x"+maior_j);
        }
        //caso tabela não preenchida, exibe erro e não cria matriz temporaria 
        else{
        String connectMessage= "Matriz inválida!";
        JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
        }

        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        jCheckBox2.setSelected(false);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       // if(chave!=null){
         //   int grau_cifra_hill=chave.getJ();
           // String texto=jTextField1.getText();
//
  //          System.out.println("Texto Recebido: "+texto);
//
  //          char[] letras = null;
    //        letras = texto.toCharArray();
      //      
        //    System.out.println("Tamanho do texto recebido: "+texto.length());
          //  
            //
            //while(letras.length%grau_cifra_hill!=0){
              //  texto=texto+"Z"; //adicionar letra randomica no futuro
                //letras = null;
                //letras = texto.toCharArray();    
            //}
            
            //texto="0"+texto;
            //letras = null;
           // letras = texto.toCharArray(); 
            
            //System.out.println("Texto Utilizado: "+texto);
            //System.out.println("Tamanho do texto utilizado: "+texto.length());
            
            //for(int cont=1; cont<letras.length; cont++){
            //    System.out.println(letras[cont]);
            //}
            //if(flag_tabela_perso==false & jCheckBox3.isSelected()==false & jCheckBox4.isSelected()==false){
            //    String connectMessage= "Tabela inválida!";
            //    JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
            //    return;   
            //}
            
            //tabela= new Tabela_Chave();
            
            //texto=Hill.codificar(letras, tabela, chave, grau_cifra_hill);
            
            //jTextPane1.setText(texto);
            //jTextPane1.setToolTipText(texto);
       //}
        //else{
           //String connectMessage= "Matriz inválida!";
          //JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
       // }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        //checkbox escolha da tabela de A-Z, quando selecionada desmarca as outras opções e desliga a flag de tabela editada
        jCheckBox4.setSelected(false);    //desativando checkbox de tabela de a-Z
        flag_tabela_perso=false;        //flag tabela editada
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        //checkbox escolha da tabela de a-Z, quando selecionada desmarca as outras opções e desliga a flag de tabela editada
        jCheckBox3.setSelected(false); //desativando checkbox de tabela de A-Z
        flag_tabela_perso=false; //flag tabela editada
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //botão criptografar
        
        //recebe texto escrito na caixa 
        String texto=jTextField1.getText();
        
        //CharArray para trabalhar com cada letra do texto
        char[] letras = null;
        letras = texto.toCharArray();
        
        //CRIANDO TABELA USADA 
            if(flag_tabela_perso==false & jCheckBox3.isSelected()==false & jCheckBox4.isSelected()==false){
                String connectMessage= "Tabela inválida!";
                JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                return;   
            }
            else{
                if(flag_tabela_perso==true){
                    tabela= new Tabela_Chave(3,null);
                }
                if(jCheckBox4.isSelected()==true){
                    tabela= new Tabela_Chave(1,null);
                }
                if(jCheckBox3.isSelected()==true){
                    tabela= new Tabela_Chave(2,null);
                }
                
            }
            
        //BUSCAR CARACTERE ILEGAL
        //VERIFICANDO SE TODAS AS PALAVRAS ESTÃO NA TABELA USADA
           
            System.out.println("Verificando letras");
            try {
                if(tabela.verificar_frase(letras)){
                    System.out.println("Verificado, letras estão na tabela");
                }
                else{
                    String connectMessage= "Caractere usado inexistente na tabela";
                    JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } 
            catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("erro ao buscar validade de letras na tabela:");
                String connectMessage= "Caractere usado inexistente na tabela";
                JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }
                
                
            
        
        
        //se a matriz chave existir, começa a parte de criptografia
        if(chave!=null){
            
            
            //define o grau de cifra de hill de acordo com a matriz chave
            int grau_cifra_hill=chave.getJ();
            

            System.out.println("Texto Recebido: "+texto);

             
            letras = null;
            letras = texto.toCharArray();
            
            System.out.println("Tamanho do texto recebido: "+texto.length());
            
            //caso falte uma ou mais letras para atingir o grau da cifra de hill, adiciona letra 
            while(letras.length%grau_cifra_hill!=0){
                texto=texto+"Z"; //adicionar letra randomica no futuro
                letras = null;
                letras = texto.toCharArray();    
            }
            
            //adiciona "0" antes do texto original para facilitar o acesso
            texto="0"+texto;
            letras = null;
            letras = texto.toCharArray(); 
            
            System.out.println("Texto Utilizado: "+texto);
            System.out.println("Tamanho do texto utilizado: "+texto.length());
            
            //definir se a operação é de criptografar ou descriptografar, no segundo caso a matriz chave sera invertida
            if(jCheckBox2.isSelected()){
                if(chave.getJ()>2|chave.getJ()==1){
                    String connectMessage= "Infelizmente, nesta versão, não é possível descriptografar com matrizes diferentes 2x2";
                    JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else{
                    int determinante= Matriz.determinante(chave);
                    
                    int modulo_tabela_tamanho=26; // MUDAR PARA TABELA EDITADAAAAAAAAAA!!!
                    
                    //inverso do determinante modulo que é o tamnho da tabela 
                    int cont=0;
                    while((determinante*cont)%modulo_tabela_tamanho!=1 & cont<=25){
                        cont++;
                    }
                    Matriz.inverter_matriz(chave); //ALTERA O OBJETO CHAVE
                                                           
                    Matriz.matriz_por_escalar(cont, chave); //ALTERA O OBJETO CHAVE
                    
                    Matriz.imprimirMatriz(chave);
                    
                    Matriz.modulo_de_n(modulo_tabela_tamanho,chave); //ALTERA O OBJETO CHAVE
                    
                }
                
            }
            
            
            
            
            //codificar texto recebido
            //tenta, com tratamento de erro, codificar o texto a partir da classe Hill
            try{
                texto=Hill.codificar(letras, tabela, chave, grau_cifra_hill);   
            }
            catch (Exception e) {
                System.out.println("erro ao tentar codificar texto, erro:"+e);
                String connectMessage= "ERRO!";
                JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //envia texto recebido da classe hill para caixa de texto do painel
            jTextPane1.setText(texto);
            //jTextPane1.setToolTipText(texto);
        }
        else{
           String connectMessage= "Matriz inválida!";
           JOptionPane.showMessageDialog(rootPane,connectMessage,"Erro",JOptionPane.ERROR_MESSAGE);
        }    
            
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
